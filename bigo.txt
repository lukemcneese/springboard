1. O(n + 10) -&gt; O(n)
2. O(100 * n) -&gt; O(n)
3. O(25) -&gt; O(1)
4. O(n^2 + n^3) -&gt; O(n^3)
5. O(n + n + n + n) - &gt; O(n)
6. O(1000 * log(n) + n) -&gt; O(n)
7. O(1000 * n * log(n) + n) -&gt;O(logn)
8. O(2^n + n^2) -&gt; O(2^n)
9. O(5 + 3 + 1) -&gt;O(1)
10. O(n + n^(1/2) + n^2 + n * log(n)^10) 0(n^2)

function logUpTo(n) -&gt; O(n)
function logAtLeast10(n) - &gt; O(n)
function logAtMost10(n) -&gt; O(1)
function onlyElementsAtEvenIndex(array) -&gt; O(n)
function subtotals(array) -&gt; O(n^2)
function vowelCount(str) -&gt; O(n)

1. True or false: n^2 + n is O(n^2). -&gt; True
2. True or false: n^2 * n is O(n^3). -&gt; True
3. True or false: n^2 + n is O(n). -&gt; False
4. What’s the time complexity of the .indexOf array method? -&gt;O(n)
5. What’s the time complexity of the .includes array method? -&gt; O(n)
6. What’s the time complexity of the .forEach array method? -&gt; O(n)
7. What’s the time complexity of the .sort array method? – O(nlogn)
8. What’s the time complexity of the .unshift array method? O (n)
9. What’s the time complexity of the .push array method? O(1)
10. What’s the time complexity of the .splice array method? O(n)
11. What’s the time complexity of the .pop array method? -&gt; O(1)
12. What’s the time complexity of the Object.keys() function? O(n)