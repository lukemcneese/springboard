{"version":3,"sources":["Cocktail.js","CocktailAPI.js","SearchForm.js","LoadingSpinner.js","Cocktails.js","Ingredient.js","UserContext.js","IngredientForm.js","Inventory.js","Rating.js","CocktailDetail.js","Home.js","Login.js","Register.js","Profile.js","useLocalStorage.js","NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["Cocktail","idDrink","strDrink","strDrinkThumb","strCategory","to","className","style","width","src","alt","BASE_URL","process","REACT_APP_BASE_URL","CocktailAPI","endpoint","data","method","db","console","debug","url","headers","Authorization","token","params","axios","response","error","message","Array","isArray","cocktailUrl","apiKEY","resp","this","request","res","drinks","name","getRandom","searchResults","resbyIngredient","drink","some","d","drinkDetails","push","id","ingredientsArray","map","item","container","strIngredient1","username","user","rating","ratings","cocktailId","inventory","inventories","ingredient","quantity","SearchForm","searchFor","useState","searchTerm","setSearchTerm","onSubmit","evt","preventDefault","trim","undefined","placeholder","value","onChange","target","type","LoadingSpinner","textAlign","fontSize","color","i","Cocktails","cocktails","setCocktails","search","getCocktailsName","useEffect","length","key","Ingredient","handleClick","onClick","UserContext","React","createContext","IngredientForm","handleIngredientSubmit","isLoading","setIsLoading","setIngredient","setIngredientArray","getIngredients","arr","getIngredientsOnMount","getItemValue","label","items","renderItem","isHighlighted","background","renderMenu","uuid","onSelect","val","Inventory","setInventory","currentUser","useContext","getUserInventory","inventoryDB","getInventoryOnMount","createInventory","newInventoryItem","tempArray","inventoryID","action","ingredientIndex","findIndex","obj","newQuantity","deleteInventory","splice","updateInventory","Rating","ratingId","setRatingId","ratingValue","setRatingValue","updateRating","createRating","getUserCocktailRating","userRating","CocktailDetail","useParams","cocktail","setCocktail","getCocktail","getCocktailDetailfromDB","strGlass","strInstructions","parse","ingredientHTML","ingredientKey","measureKey","renderIngredients","Home","Login","login","navigate","useNavigate","password","formData","setFormData","formErrors","setFormErrors","result","success","errors","handleChange","htmlFor","alert","Register","register","firstName","lastName","email","Profile","setCurrentUser","profileData","saveProfile","updatedUser","f","useLocalStorage","initialValue","localStorage","getItem","setItem","removeItem","NavigationBar","logout","isOpen","setIsOpen","display","padding","light","expand","href","navbar","App","setToken","registerData","signup","loginData","jwt","decode","getCurrentUser","Provider","path","element","cantFind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09bebf12.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Cocktail = ({idDrink, strDrink, strDrinkThumb, strCategory}) =>{\n    return (\n    <Link to={`/cocktails/${idDrink}`}>\n        <div className=\"card\" style={{width: '18rem'}}>\n        <img src={`${strDrinkThumb}`} alt={`${strDrink}`} className=\"card-img-top\"/>\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{strDrink}</h4>\n                <p>Cateogry: {strCategory}</p>\n            </div> \n        </div>\n    </Link>\n    );\n}\nexport default Cocktail","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass CocktailAPI {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\", db=\"theCocktailDB\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    if (db === \"cocktailCreatorDB\"){\n        const url = `${BASE_URL}/${endpoint}`;\n        const headers = { Authorization: `Bearer ${CocktailAPI.token}` };\n        const params = (method === \"get\")\n            ? data\n            : {};\n\n        try {\n        let response = (await axios({ url, method, data, params, headers })).data\n        return response;\n        } catch (err) {\n          console.error(\"API Error:\", err.response);\n          let message = err.response.data.error.message;\n          throw Array.isArray(message) ? message : [message];\n        }\n    }else if (db === \"theCocktailDB\"){\n        const cocktailUrl = \"https://www.thecocktaildb.com/api/json/v2/\"\n        const apiKEY = \"9973533/\"\n        if (method !== \"get\") console.error(\"API Error: only GET Methods allowed for CocktailDB\")\n        try {\n            const url = cocktailUrl + apiKEY + endpoint +\".php\";\n            const params = (method === \"get\")\n            ? data\n            : {};\n            const resp = (await axios({url, params})).data;\n            return resp;\n        } catch (err){\n            console.error(\"API Error:\", err.response);\n        }\n    }\n  }\n\n\n  // Individual API routes\n\n  static async getRandom(){\n      let res = await this.request(\"random\",\"random\", \"get\", \"theCocktailDB\")\n      return res.drinks[0];\n  }\n\n  static async getCocktailsName(name=\"\") {\n    if (name === \"\"){\n      let res =  await this.getRandom();\n      return res;\n    }\n    let searchResults = await this.request(\"search\", {\"s\":name}, \"get\", \"theCocktailDB\");\n    searchResults = searchResults.drinks;\n    let resbyIngredient = await this.request(\"filter\", {\"i\":name}, \"get\", \"theCocktailDB\");\n    for(let drink of resbyIngredient.drinks){\n      if(!searchResults.some(d => d['idDrink']=== drink.idDrink)){\n        const drinkDetails = await this.request(\"lookup\", {\"i\":drink.idDrink}, \"get\", \"theCocktailDB\");\n        searchResults.push(drinkDetails.drinks[0])\n      }\n    }\n    return searchResults\n    //eventually request the local DB as well and append the results and add some sort of rank??\n  }\n  static async getCocktail(id) {\n    let res = await this.request(\"lookup\", {\"i\":id}, \"get\", \"theCocktailDB\");\n    return res.drinks[0];\n  }\n  static async getIngredients(){\n    let res = await this.request(\"list\", {\"i\": \"list\"}, \"get\", \"theCocktailDB\");\n\n    //change the format of the Array of Ingredeints to match what is needed for the IngredientForm\n    let ingredientsArray = res.drinks;\n    ingredientsArray = ingredientsArray.map(item =>{\n      const container = {};\n      container[\"label\"] = item.strIngredient1;\n      return container;\n    })\n    return ingredientsArray;\n  }\n\n\n  /** Handle Logging and and Profile API Calls*/\n  static async signup(data){\n    let res = await this.request('auth/register', data, \"post\", \"cocktailCreatorDB\");\n    return res.token\n  }\n  static async login(data){\n    let res = await this.request('auth/token', data, \"post\", \"cocktailCreatorDB\");\n    return res.token;\n  }\n  static async getCurrentUser(username){\n    let res = await this.request(`users/${username}`,{}, \"get\", \"cocktailCreatorDB\");\n    return res.user;\n  }\n  static async saveProfile(username, data){\n    let res = await this.request(`users/${username}`,data, \"patch\", \"cocktailCreatorDB\");\n    return res.user;\n  }\n\n\n  /** Handles Rating API Calls */\n  static async createRating(username, data){\n    let res = await this.request(`users/${username}/ratings`,data, \"post\", \"cocktailCreatorDB\")\n    return res.rating;\n  }\n\n  static async getRating(username,id){\n    let res = await this.request(`users/${username}/ratings/${id}`,{}, \"get\", \"cocktailCreatorDB\")\n    return res.rating;\n  }\n  static async getUserRatings(username){\n    let res = await this.request(`users/${username}/ratings/`,{}, \"get\", \"cocktailCreatorDB\")\n    return res.ratings;\n  }\n  static async getUserCocktailRating(username, cocktailId){\n    let res = await this.request(`users/${username}/ratings/cocktails/${cocktailId}`, {}, \"get\", \"cocktailCreatorDB\")\n    return res.rating;\n  }\n  static async updateRating(username,id, rating){\n    let res = await this.request(`users/${username}/ratings/${id}`,rating, \"patch\", \"cocktailCreatorDB\")\n    return res.rating;\n  }\n  static async deleteRating(username,id){\n    let res = await this.request(`users/${username}/ratings/${id}`,{}, \"delete\", \"cocktailCreatorDB\")\n    return res;\n  }\n\n    /** Handles Inventory API Calls */\n  static async createInventory(username, data){\n    let res = await this.request(`users/${username}/inventories`,data, \"post\", \"cocktailCreatorDB\")\n    return res.inventory;\n  }\n  static async getUserInventory(username){\n    let res = await this.request(`users/${username}/inventories/`,{}, \"get\", \"cocktailCreatorDB\")\n    return res.inventories;\n  }\n  static async getUserIngredientQuantity(username, ingredient){\n    let res = await this.request(`users/${username}/inventories/ingredient/${ingredient}`, {}, \"get\", \"cocktailCreatorDB\")\n    return res.inventory;\n  }\n\n  static async updateInventory(username,id, quantity){\n    let res = await this.request(`users/${username}/inventories/${id}`,{quantity}, \"patch\", \"cocktailCreatorDB\")\n    return res.inventory;\n  }\n  static async deleteInventory(username,id){\n    let res = await this.request(`users/${username}/inventories/${id}`,{}, \"delete\", \"cocktailCreatorDB\")\n    return res;\n  }\n}\n\n//(\"testuser\" / \"password\" on class)\nCocktailAPI.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default CocktailAPI","import React, { useState } from \"react\";\n//import \"./SearchForm.css\";\n\n/** Search widget.\n *\n * Appears on ** and ** so that these can be filtered\n * down.\n *\n * This component doesn't *do* the searching, but it renders the search\n * form and calls the `searchFor` function prop that runs in a parent to do the\n * searching.\n *\n * { **, ** } -> SearchForm\n */\n\nfunction SearchForm({ searchFor }) {\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  /** Tell parent to filter */\n  function handleSubmit(evt) {\n    // take care of accidentally trying to search for just spaces\n    evt.preventDefault();\n    searchFor(searchTerm.trim() || undefined);\n    setSearchTerm(searchTerm.trim());\n  }\n\n  /** Update form fields */\n  function handleChange(evt) {\n    setSearchTerm(evt.target.value);\n  }\n\n  return (\n      <div className=\"SearchForm mb-4\">\n          <h3>Search for a cocktail by name</h3>\n        <form className=\"form-inline\" onSubmit={handleSubmit}>\n          <input\n              className=\"form-control form-control-lg flex-grow-1\"\n              name=\"searchTerm\"\n              placeholder=\"Enter search term..\"\n              value={searchTerm}\n              onChange={handleChange}\n          />\n          <button type=\"submit\" className=\"btn btn-lg btn-primary\">\n            Submit\n          </button>\n        </form>\n      </div>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\n/** Loading message used by components that fetch API data. */\n\nfunction LoadingSpinner() {\n  return (\n      <div style={{textAlign: \"center\", fontSize: \"24pt\", color:\"blue\"}}>\n        Loading ...\n      </div>\n  );\n}\n\nexport default LoadingSpinner;","import React, {useState, useEffect} from \"react\";\nimport Cocktail from \"./Cocktail\"\nimport CocktailAPI from \"./CocktailAPI\";\nimport SearchForm from \"./SearchForm\";\nimport LoadingSpinner from \"./LoadingSpinner\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Cocktails(){\n    const [cocktails, setCocktails] = useState([])\n\n    useEffect(function getCocktailsOnMount() {\n        search();\n    }, []);\n\n    /** Triggered by search form submit; reloads Cocktails. */\n    async function search(name) {\n        let cocktails = await CocktailAPI.getCocktailsName(name);\n        setCocktails(cocktails);\n    }\n    if (!cocktails) return <LoadingSpinner />;\n     return (\n        <>\n            <SearchForm searchFor={search} />\n             {cocktails.length\n                ? \n                (<div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {cocktails.map(({idDrink, strDrink, strDrinkThumb, strCategory}) =>(\n                        <Cocktail\n                            key={idDrink}\n                            idDrink = {idDrink} \n                            strDrink={strDrink}\n                            strDrinkThumb={strDrinkThumb}\n                            strCategory={strCategory}\n                        />\n                        ))} \n                    </div>\n                </div>) : <p> No Results Found</p>}\n        </>\n      );\n  }\n  export default Cocktails;","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Ingredient = ({id,ingredient, quantity, handleClick}) =>{\n    return (\n        <div className=\"card\" style={{width: '18rem'}}>\n        <img src={`https://www.thecocktaildb.com/images/ingredients/${ingredient}-Medium.png`} alt={`${ingredient}`} className=\"card-img-top\"/>\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{ingredient}</h4>\n                <p className=\"card-text\">Quantity: {quantity}</p>\n                <div>\n                    <button id={id} onClick={handleClick} type=\"submit\" name={\"add\"} className=\"btn btn-success\">Add</button>\n                    <button id={id} onClick={handleClick} type=\"submit\" name={\"remove\"} className=\"btn btn-danger\">Remove</button>\n                </div>\n            </div>\n        </div>\n        \n    );\n}\nexport default Ingredient","import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, {useEffect, useState} from \"react\";\nimport Autocomplete from \"react-autocomplete\"\nimport CocktailAPI from \"./CocktailAPI\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport {v4 as uuid} from 'uuid';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst IngredientForm = ({handleIngredientSubmit}) =>{\n    const [isLoading, setIsLoading] = useState(true);\n    const [ingredient, setIngredient] = useState('');\n    const [ingredientsArray, setIngredientArray] = useState(null);\n    //Load Values from API on load\n    useEffect(function loadAPIIngredient() {\n        console.debug(\"App useEffect loadUserInventory\");\n    \n        async function getIngredientsOnMount() {\n                try {\n                    const arr = await CocktailAPI.getIngredients();\n                    setIngredientArray(arr);\n                } catch (err) {\n                    console.error(\"App getIngredientsOnMount: problem loading\", err);\n                }\n                setIsLoading(false);\n            }\n            setIsLoading(true);\n            getIngredientsOnMount();\n      }, []);\n    function handleSubmit(evt){\n        evt.preventDefault();\n        handleIngredientSubmit(ingredient)\n    }\n    let handleChange = (evt) =>{\n        setIngredient(evt.target.value)\n    }\n\n    if (isLoading) return <LoadingSpinner />;\n    return (\n            <form onSubmit={handleSubmit}>\n                <Autocomplete\n                    getItemValue={(item) => item.label}\n                    items={ingredientsArray}\n                    renderItem={(item, isHighlighted) =>\n                        <div style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\n                        {item.label}\n                        </div>}\n                    renderMenu={item => (\n                    <div className=\"dropdown\">\n                        {item}\n                    </div>\n                    )}\n                    value={ingredient}\n                    key={`${ingredient}${uuid()}`}\n                    onChange={handleChange}\n                    onSelect={(val) => setIngredient(val)}\n                />\n                <button className=\"submit\" type=\"submit\">Submit</button>\n            </form>\n    );\n}\nexport default IngredientForm","import React, {useState, useEffect, useContext} from \"react\";\nimport Ingredient from \"./Ingredient\"\nimport CocktailAPI from \"./CocktailAPI\";\nimport LoadingSpinner from \"./LoadingSpinner\"\nimport UserContext from \"./UserContext\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport IngredientForm from \"./IngredientForm\";\n\nfunction Inventory(){\n    const [inventory, setInventory] = useState([])\n    const [isLoading, setIsLoading] = useState(true);\n    const {currentUser} = useContext(UserContext)\n\n\n    useEffect(function loadUserInventory() {\n        console.debug(\"App useEffect loadUserInventory\");\n    \n        async function getInventoryOnMount() {\n            if (currentUser) {\n                try {\n                    let inventoryDB = await CocktailAPI.getUserInventory(currentUser.username);\n                    setInventory(inventoryDB);\n                } catch (err) {\n                console.error(\"App getInventoryOnMount: problem loading\", err);\n                }\n            }\n            setIsLoading(false);\n            }\n            setIsLoading(true);\n            getInventoryOnMount();\n      }, [currentUser]);\n\n    //updates the ingredients in Inventory\n    const handleIngredientSubmit = async function (ingredient){\n        let newInventoryItem = await CocktailAPI.createInventory(currentUser.username,{ingredient:ingredient, quantity:1,username:currentUser.username})\n        const tempArray = [...inventory];\n        tempArray.push(newInventoryItem);\n        setInventory(tempArray);\n    };\n\n\n    async function handleClick(evt) {\n        evt.preventDefault();\n        const inventoryID = +evt.target.id;\n        const action = evt.target.name;\n        const ingredientIndex = inventory.findIndex( obj => obj.id === inventoryID);\n        const ingredient = inventory[ingredientIndex];\n        \n        //get the current quantity of inventory and update.\n        let newQuantity = ingredient.quantity;\n        if (action === \"add\"){ newQuantity ++;}\n        else if(action === \"remove\"){ newQuantity --;}\n\n        const tempArray = [...inventory]\n        //remove from DB if remove is clicked again after inventory is 0\n        if (newQuantity === -1){ \n            await CocktailAPI.deleteInventory(currentUser.username, inventoryID);\n            tempArray.splice(ingredientIndex,1);\n        }else{\n            await CocktailAPI.updateInventory(currentUser.username, inventoryID, newQuantity);\n            tempArray[ingredientIndex].quantity = newQuantity\n        }\n        //update state\n        setInventory(tempArray)\n      }\n\n    if (isLoading) return <LoadingSpinner />;\n     return (\n        <>\n            \n             {inventory.length\n                ? \n                (<div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {inventory.map(({id, ingredient, quantity}) =>(\n                        <Ingredient\n                            key={id}\n                            id = {id} \n                            ingredient={ingredient}\n                            quantity={quantity}\n                            handleClick= {handleClick}\n                        />\n                        ))} \n                    </div>\n                </div>) : <p> Add some Ingredients to your Inventory</p>}\n            <IngredientForm handleIngredientSubmit={handleIngredientSubmit}/>\n        </>\n      );\n  }\n  export default Inventory;","import React, {useState, useContext, useEffect} from \"react\";\nimport CocktailAPI from \"./CocktailAPI\";\nimport UserContext from \"./UserContext\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Rating = ({idDrink}) =>{\n    const {currentUser} = useContext(UserContext)\n    const [ratingId, setRatingId] = useState(null)\n    const [ratingValue, setRatingValue] = useState(0);\n    const [isLoading, setIsLoading] = useState(true);\n    \n    useEffect(function loadUserCocktailRating() {\n        console.debug(\"App useEffect loadUserCocktailRating\");\n    \n        async function getUserCocktailRating() {\n          if (currentUser) {\n            try {\n              let userRating = await CocktailAPI.getUserCocktailRating(currentUser.username, idDrink);\n              setRatingId(userRating.id);\n              setRatingValue(userRating.rating);\n            } catch (err) {\n              console.error(\"App loadUserCocktailRating: problem loading\", err);\n            }\n          }\n          setIsLoading(false);\n        }\n    \n        // set isLoading to ture while async getUserCocktailRating runs; once the\n        // data is fetched (or even if an error happens!), this will be set back\n        // to true to control the spinner.\n        setIsLoading(true);\n        getUserCocktailRating();\n      }, [currentUser,idDrink]);\n\n      \n\n    async function handleSubmit(evt){\n        evt.preventDefault();\n        const data = {\n            username: currentUser.username,\n            rating: +ratingValue,\n            cocktailId: +idDrink,\n        }\n        let res = {};\n        if(ratingId){\n            res = await CocktailAPI.updateRating(currentUser.username,ratingId,{rating:+ratingValue})\n        }else{\n            res = await CocktailAPI.createRating(currentUser.username,data)\n        }\n        setRatingId(res.id)\n    }\n    function handleChange(evt){\n        const {value} = evt.target;\n        setRatingValue(value);\n    }\n    if (isLoading) {\n        return <p>Loading page;</p>;\n      }\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            <label>Rating:\n                <select name=\"rating\" id=\"rating\" value={ratingValue} onChange={handleChange}>\n                    <option value={0}>0</option>\n                    <option value={1}>1</option>\n                    <option value={2}>2</option>\n                    <option value={3}>3</option>\n                    <option value={4}>4</option>\n                    <option value={5}>5</option>\n                </select>\n            </label>\n            <input type=\"submit\" value=\"Submit\"className=\"btn btn-primary\"/>\n        </form>\n    );//add Ternary Operator for Submit/Update on the text of the submit box\n}\nexport default Rating","import React, {useState, useEffect} from \"react\"\nimport { useParams } from \"react-router-dom\";\nimport CocktailAPI from \"./CocktailAPI\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport parse from \"html-react-parser\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Rating from \"./Rating\";\n\n\nfunction CocktailDetail(){\n    const {idDrink} = useParams();\n    console.debug(\"CocktailDetail\",\"idDrink=\",idDrink)\n    const [cocktail, setCocktail] = useState(null)\n\n    useEffect(function getCocktailDetail(){\n        async function getCocktailDetailfromDB(){\n            setCocktail(await CocktailAPI.getCocktail(idDrink));\n        }\n        getCocktailDetailfromDB()\n    },[cocktail, idDrink])\n\n    function renderIngredients(){\n        let ingredientHTML = \"<table><tr><th>Ingredient</th><th>Measurement</th></tr>\"\n        for(let i = 1; i<16; i++){\n            let ingredientKey = \"strIngredient\" + i;\n            let measureKey = \"strMeasure\" + i;\n            if (cocktail[ingredientKey] === null){break}\n            ingredientHTML += \"<tr>\";\n            ingredientHTML += `<td> ${cocktail[ingredientKey]}</td>`;\n            ingredientHTML += `<td> ${cocktail[measureKey]}</td>`;\n            ingredientHTML += \"</tr>\";\n        }\n        ingredientHTML += \"</table>\"\n        return ingredientHTML;\n\n    }\n\n    if (!cocktail) return <LoadingSpinner />;\n\n    return (\n        <div className=\"card justify-content-center\" style={{width: '18rem'}}>\n            <img src={`${cocktail.strDrinkThumb}`} alt={`${cocktail.strDrink}`} className=\"card-img-top\"/>\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{cocktail.strDrink}</h4>\n                <p className=\"card-text\">Cateogry: {cocktail.strCategory}</p>\n                <p className=\"card-text\">Glass: {cocktail.strGlass}</p>\n                <p className=\"card-text\">{cocktail.strInstructions}</p>\n                {parse(renderIngredients())}\n                <br/>\n                <Rating idDrink={cocktail.idDrink}/>\n            </div>\n        </div>\n    );\n}\nexport default CocktailDetail","import React from \"react\";\n\n  function Home(){\n      return (<h1>Cocktail Creator</h1>)\n  }\n  export default Home;","import React, {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\"\n\n  function Login({login}){\n    const navigate = useNavigate();\n    const [formData, setFormData] = useState({\n      username: \"\",\n      password: \"\"\n    });\n    const [formErrors, setFormErrors] = useState([]);\n\n    async function handleSubmit(evt){\n      evt.preventDefault();\n      let result = await login(formData);\n      if(result.success){\n        navigate(\"/cocktails\");\n      } else{\n        setFormErrors(result.errors);\n      }\n    }\n\n    function handleChange(evt){\n      const {name, value} = evt.target;\n      setFormData(data => ({...data, [name]:value}))\n    }\n    return (\n      <>\n      <h1>Login</h1>\n        <div>\n         <form onSubmit={handleSubmit}>\n           <label htmlFor=\"username\">Username</label>\n           <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n           /><br/>\n           <label htmlFor=\"password\">Password</label>\n           <input\n              id=\"password\"\n              type=\"text\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n           /><br/>\n           {formErrors.length ? alert(formErrors) : null}\n          <button>Login</button>\n         </form> \n        </div>\n      </>\n    \n    \n    )\n  }\n  export default Login;","import React, {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\"\n\nfunction Register({register}){\n    const navigate = useNavigate();\n    const [formData, setFormData] = useState({\n      username: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\"\n    });\n    const [formErrors, setFormErrors] = useState([]);\n\n    async function handleSubmit(evt){\n      evt.preventDefault();\n      let result = await register(formData);\n      if(result.success){\n        navigate(\"/cocktails\");\n      } else{\n        setFormErrors(result.errors);\n      }\n    }\n\n    function handleChange(evt){\n      const {name, value} = evt.target;\n      setFormData(data => ({...data, [name]:value}))\n    }\n    return (\n      <>\n      <h1>Register</h1>\n        <div>\n         <form onSubmit={handleSubmit}>\n           <label htmlFor=\"username\">Username</label>\n           <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n           /><br/>\n           <label htmlFor=\"password\">Password</label>\n           <input\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n           /><br/>\n          <label htmlFor=\"firstName\">First Name</label>\n           <input\n              id=\"firstName\"\n              type=\"text\"\n              name=\"firstName\"\n              value={formData.firstName}\n              onChange={handleChange}\n           /><br/>\n          <label htmlFor=\"lastName\">Last Name</label>\n           <input\n              id=\"lastName\"\n              type=\"text\"\n              name=\"lastName\"\n              value={formData.lastName}\n              onChange={handleChange}\n           /><br/>\n           <label htmlFor=\"email\">Email</label>\n           <input\n              id=\"email\"\n              type=\"text\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n           /><br/>\n           {formErrors.length ? alert(formErrors) : null}\n          <button>Login</button>\n         </form> \n        </div>\n      </>\n    \n    \n    )\n  }\n  export default Register;","import React, {useState, useContext} from \"react\";\nimport CocktailAPI from \"./CocktailAPI\";\nimport UserContext from \"./UserContext\";\n\n  function Profile(){\n    const {currentUser, setCurrentUser} = useContext(UserContext)\n    const [formData, setFormData] = useState({\n      firstName: currentUser.firstName,\n      lastName: currentUser.lastName,\n      email: currentUser.email,\n      username: currentUser.username,\n      password: \"\",\n    });\n    const [formErrors, setFormErrors] = useState([]);\n\n    async function handleSubmit(evt) {\n      evt.preventDefault();\n  \n      let profileData = {\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        password: formData.password,\n      };\n      let username = formData.username;\n      let updatedUser;\n  \n      try {\n        updatedUser = await CocktailAPI.saveProfile(username, profileData);\n      } catch (errors) {\n        setFormErrors(errors);\n        return;\n      }\n  \n      setFormData(f => ({ ...f, password: \"\" }));\n      setFormErrors([]);\n      setCurrentUser(updatedUser);\n    }\n      function handleChange(evt) {\n        const { name, value } = evt.target;\n        setFormData(data => ({...data,[name]: value}));\n        setFormErrors([]);\n      }\n      return(\n        <>\n        <h1>Update Profile</h1>\n          <div>\n           <form onSubmit={handleSubmit}>\n             <label htmlFor=\"username\">Username</label>\n             <input\n                id=\"username\"\n                type=\"text\"\n                name=\"username\"\n                value={formData.username}\n                onChange={handleChange}\n             /><br/>\n             <label htmlFor=\"password\">Password</label>\n             <input\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n             /><br/>\n            <label htmlFor=\"firstName\">First Name</label>\n             <input\n                id=\"firstName\"\n                type=\"text\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange}\n             /><br/>\n            <label htmlFor=\"lastName\">Last Name</label>\n             <input\n                id=\"lastName\"\n                type=\"text\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange}\n             /><br/>\n             <label htmlFor=\"email\">Email</label>\n             <input\n                id=\"email\"\n                type=\"text\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n             /><br/>\n             {formErrors.length ? alert(formErrors) : null}\n            <button>Update Profile</button>\n           </form> \n          </div>\n        </>\n      )\n  }\n  export default Profile;","import {useState, useEffect} from \"react\";\n\nfunction useLocalStorage(key, value=null){\n    const initialValue = localStorage.getItem(key) || value;\n    const [item, setItem] = useState(initialValue);\n\n    useEffect(function setLocalStorage(){\n        if (item === null){\n            localStorage.removeItem(key)\n        } else {\n            localStorage.setItem(key, item)\n        }\n    }, [key, item]);\n    return [item, setItem];\n}\n\nexport default useLocalStorage;","import React, {useState, useContext} from \"react\";\nimport { NavLink, Navbar, Nav, NavItem,NavbarToggler, Collapse, NavbarBrand } from 'reactstrap';\nimport UserContext from \"./UserContext\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction NavigationBar({logout}) {\n    const {currentUser} = useContext(UserContext)\n    const [isOpen, setIsOpen] = useState(false);\n\n    function loggedInNav(){\n        return (<>\n            <NavItem>\n                <NavLink href=\"/inventory\">Inventory</NavLink>\n            </NavItem>\n            <NavItem>\n                <NavLink href=\"/profile\">Profile</NavLink>\n            </NavItem>\n            <NavItem>\n                <NavLink href=\"/\"onClick={logout}>Logout {currentUser.firstName}</NavLink>\n            </NavItem>\n        </>);\n\n    }\n    function loggedOutNav(){\n        return(<>\n            <NavItem>\n                <NavLink href=\"/login\">Login</NavLink>\n            </NavItem>\n            <NavItem>\n                <NavLink href=\"/register\">Register</NavLink>\n            </NavItem>\n        </>);\n    }\n\n\n    return (\n        <div style={{display: 'block', width: 700, padding: 30}}>\n            <Navbar color=\"light\" light expand=\"md\">\n                <NavbarBrand href=\"/\" className=\"me-auto\">Cocktail Creator</NavbarBrand>\n                <NavbarToggler onClick={() => { setIsOpen(!isOpen)}} className=\"me-2\"/>\n                <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"mr-auto\" navbar>\n                        <NavItem>\n                            <NavLink href=\"/cocktails\">Cocktails</NavLink>\n                        </NavItem>\n                        {currentUser ? loggedInNav() : loggedOutNav()}\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        </div >\n    );\n}\n\nexport default NavigationBar;\n","import React,{useState, useEffect} from \"react\";\nimport {Routes, Route, BrowserRouter} from \"react-router-dom\"\nimport Cocktails from \"./Cocktails\";\nimport Inventory from \"./Inventory\";\nimport CocktailDetail from \"./CocktailDetail\";\nimport CocktailAPI from \"./CocktailAPI\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport Profile from \"./Profile\";\nimport UserContext from \"./UserContext\";\nimport useLocalStorage from \"./useLocalStorage\";\nimport jwt from \"jsonwebtoken\";\nimport NavigationBar from \"./NavigationBar\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"cocktailCreator-token\";\n\n\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n    // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          CocktailAPI.token = token;\n          let currentUser = await CocktailAPI.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setIsLoading(false);\n    }\n\n    // set isLoading to ture while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to true to control the spinner.\n    setIsLoading(true);\n    getCurrentUser();\n  }, [token]);\n\n   /** Handles site-wide logout. */\n   function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide register.\n   *\n   * Automatically logs them in (set token) upon register.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function register(registerData) {\n    try {\n      let token = await CocktailAPI.signup(registerData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"register failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await CocktailAPI.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  // useEffect(() => {\n  //   async function seedRndCocktail() {\n  //     let cocktail = await CocktailAPI.getRandom();\n  //     console.log(cocktail);\n  //     setRndCocktail(cocktail);\n  //     setIsLoading(false);\n  //   }\n  //   setIsLoading(true);\n  //   seedRndCocktail();\n  // },[]);\n\n  if (isLoading) {\n    return <p>Loading page;</p>;\n  }\n\n  return (\n    <>\n      <BrowserRouter>\n        <UserContext.Provider value = {{currentUser, setCurrentUser}}>\n          <NavigationBar logout={logout}/>\n          <Routes>\n            <Route path=\"/\"element={<Home/>}/>\n            <Route path=\"/login\" element={<Login login={login}/>}/>\n            <Route path=\"/register\" element={<Register register={register}/>}/>\n            <Route path=\"/profile\" element={<Profile/>}/>\n            <Route path=\"/cocktails/\" element={<Cocktails/>}/>\n            <Route path=\"/cocktails/:idDrink\" element={<CocktailDetail/>} cantFind=\"/cocktails\" />\n            <Route path=\"/inventory/\" element={<Inventory/>}/>\n          </Routes>\n        </UserContext.Provider>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}